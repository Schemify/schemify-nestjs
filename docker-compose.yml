services:
  schemify-microservice:
    container_name: schemify-microservice
    build:
      context: .
      dockerfile: apps/schemify-microservice-nestjs/Dockerfile
    ports:
      - '${SERVICE_PORT}:${SERVICE_PORT}'
      - '50051:50051'
    environment:
      - NODE_ENV=${NODE_ENV}
      - PORT=${SERVICE_PORT}
      - APP_NAME=${SERVICE_APP_NAME}
      - GRPC_URL=${SERVICE_GRPC_URL}
      - GRPC_PROTO_PATH=${SERVICE_GRPC_PROTO_PATH}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
    depends_on:
      - postgres
    networks:
      - schemify-net

  postgres:
    container_name: postgres
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - '${POSTGRES_PORT}:5432'
    volumes:
      - postgres-data:/var/lib/postgresql/data
    restart: on-failure
    networks:
      - schemify-net

volumes:
  postgres-data:
    driver: local

networks:
  schemify-net:
    driver: bridge
# ! OLD 2

# networks:
#   kafka-cluster_kafka-net:
#     external: true

# services:
#   api-gateway:
#     build:
#       context: .
#       dockerfile: docker/api-gateway.Dockerfile
#     ports:
#       - '3011:3010' # Exponer puerto para api-gateway
#     environment:
#       NODE_ENV: production
#     networks:
#       - kafka-cluster_kafka-net # Conectar a la red externa de Kafka

#   schemify-nestjs:
#     build:
#       context: .
#       dockerfile: docker/schemify-nestjs.Dockerfile
#     ports:
#       - '3010:3010' # Exponer puerto para schemify-nestjs
#     environment:
#       NODE_ENV: production
#     networks:
#       - kafka-cluster_kafka-net

#   schemify-nestjs-consumer:
#     build:
#       context: .
#       dockerfile: docker/schemify-nestjs-consumer.Dockerfile
#     ports:
#       - '3020:3010' # Exponer puerto para schemify-nestjs-consumer
#     environment:
#       NODE_ENV: production
#     networks:
#       - kafka-cluster_kafka-net
# # ! OLD
# # services:
# #   app:
# #     container_name: schemify-nestjs
# #     build:
# #       context: .
# #       dockerfile: Dockerfile
# #     restart: unless-stopped
# #     depends_on:
# #       - postgres
# #       - mongo
# #     ports:
# #       - '${APP_PORT}:3010'
# #     environment:
# #       NODE_ENV: ${NODE_ENV}
# #       POSTGRES_URL: ${POSTGRES_URL}
# #       MONGO_URI: ${MONGO_URI}
# #       APP_PORT: ${APP_PORT}
# #     volumes:
# #       - ./logs:/home/node/app/logs
# #     networks:
# #       - schemify-networks
# #       - kafka-cluster_kafka-net
# #       - nginxproxymanager_nginxproxymanager-app-1-network

# #   postgres:
# #     image: postgres:15
# #     container_name: schemify-postgres-db
# #     restart: always
# #     environment:
# #       POSTGRES_other: ${POSTGRES_other}
# #       POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
# #       POSTGRES_DB: ${POSTGRES_DB}
# #       POSTGRES_PORT: ${POSTGRES_PORT}
# #     ports:
# #       - '${POSTGRES_PORT}:5432'
# #     volumes:
# #       - pgdata:/var/lib/postgresql/data
# #     networks:
# #       - schemify-networks

# #   mongo:
# #     image: mongo:6
# #     container_name: schemify-mongo-db
# #     restart: always
# #     environment:
# #       MONGO_INITDB_ROOT_otherNAME: ${MONGO_INITDB_ROOT_otherNAME}
# #       MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
# #       MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
# #       MONGO_PORT: ${MONGO_PORT}
# #     ports:
# #       - '${MONGO_PORT}:27017'
# #     volumes:
# #       - mongodata:/data/db
# #     networks:
# #       - schemify-networks

# # networks:
# #   schemify-networks:
# #     driver: bridge
# #   kafka-cluster_kafka-net:
# #     external: true
# #   nginxproxymanager_nginxproxymanager-app-1-network:
# #     external: true

# # volumes:
# #   pgdata:
# #     driver: local
# #   mongodata:
# #     driver: local
