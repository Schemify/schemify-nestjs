// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v3.20.3
// source: services/usuarios_gestor/usuarios_gestor.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from '@bufbuild/protobuf/wire'
import {
  type handleUnaryCall,
  type UntypedServiceImplementation
} from '@grpc/grpc-js'
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices'
import { Observable } from 'rxjs'

export const protobufPackage = 'usuarios_gestor'

export interface UsuariosGestorEmpty {}

export interface GetByIdDto {
  id?: string | undefined
}

export interface CreateUsuariosGestorDto {
  name?: string | undefined
  /** agregar más campos si es necesario */
  description?: string | undefined
}

export interface UpdateUsuariosGestorDto {
  id?: string | undefined
  data?: UpdateUsuariosGestorData | undefined
}

export interface UpdateUsuariosGestorData {
  name?: string | undefined
  /** más campos opcionales */
  description?: string | undefined
}

export interface UsuariosGestor {
  id?: string | undefined
  name?: string | undefined
  /** campos adicionales si aplica */
  description?: string | undefined
}

export interface UsuariosGestors {
  items?: UsuariosGestor[] | undefined
}

export const USUARIOS_GESTOR_PACKAGE_NAME = 'usuarios_gestor'

function createBaseUsuariosGestorEmpty(): UsuariosGestorEmpty {
  return {}
}

export const UsuariosGestorEmpty: MessageFns<UsuariosGestorEmpty> = {
  encode(
    _: UsuariosGestorEmpty,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    return writer
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): UsuariosGestorEmpty {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input)
    let end = length === undefined ? reader.len : reader.pos + length
    const message = createBaseUsuariosGestorEmpty()
    while (reader.pos < end) {
      const tag = reader.uint32()
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break
      }
      reader.skip(tag & 7)
    }
    return message
  }
}

function createBaseGetByIdDto(): GetByIdDto {
  return {}
}

export const GetByIdDto: MessageFns<GetByIdDto> = {
  encode(
    message: GetByIdDto,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.id !== undefined && message.id !== '') {
      writer.uint32(10).string(message.id)
    }
    return writer
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetByIdDto {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input)
    let end = length === undefined ? reader.len : reader.pos + length
    const message = createBaseGetByIdDto()
    while (reader.pos < end) {
      const tag = reader.uint32()
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break
          }

          message.id = reader.string()
          continue
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break
      }
      reader.skip(tag & 7)
    }
    return message
  }
}

function createBaseCreateUsuariosGestorDto(): CreateUsuariosGestorDto {
  return {}
}

export const CreateUsuariosGestorDto: MessageFns<CreateUsuariosGestorDto> = {
  encode(
    message: CreateUsuariosGestorDto,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.name !== undefined && message.name !== '') {
      writer.uint32(10).string(message.name)
    }
    if (message.description !== undefined) {
      writer.uint32(18).string(message.description)
    }
    return writer
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): CreateUsuariosGestorDto {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input)
    let end = length === undefined ? reader.len : reader.pos + length
    const message = createBaseCreateUsuariosGestorDto()
    while (reader.pos < end) {
      const tag = reader.uint32()
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break
          }

          message.name = reader.string()
          continue
        }
        case 2: {
          if (tag !== 18) {
            break
          }

          message.description = reader.string()
          continue
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break
      }
      reader.skip(tag & 7)
    }
    return message
  }
}

function createBaseUpdateUsuariosGestorDto(): UpdateUsuariosGestorDto {
  return {}
}

export const UpdateUsuariosGestorDto: MessageFns<UpdateUsuariosGestorDto> = {
  encode(
    message: UpdateUsuariosGestorDto,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.id !== undefined && message.id !== '') {
      writer.uint32(10).string(message.id)
    }
    if (message.data !== undefined) {
      UpdateUsuariosGestorData.encode(
        message.data,
        writer.uint32(18).fork()
      ).join()
    }
    return writer
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): UpdateUsuariosGestorDto {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input)
    let end = length === undefined ? reader.len : reader.pos + length
    const message = createBaseUpdateUsuariosGestorDto()
    while (reader.pos < end) {
      const tag = reader.uint32()
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break
          }

          message.id = reader.string()
          continue
        }
        case 2: {
          if (tag !== 18) {
            break
          }

          message.data = UpdateUsuariosGestorData.decode(
            reader,
            reader.uint32()
          )
          continue
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break
      }
      reader.skip(tag & 7)
    }
    return message
  }
}

function createBaseUpdateUsuariosGestorData(): UpdateUsuariosGestorData {
  return {}
}

export const UpdateUsuariosGestorData: MessageFns<UpdateUsuariosGestorData> = {
  encode(
    message: UpdateUsuariosGestorData,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.name !== undefined && message.name !== '') {
      writer.uint32(10).string(message.name)
    }
    if (message.description !== undefined) {
      writer.uint32(18).string(message.description)
    }
    return writer
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number
  ): UpdateUsuariosGestorData {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input)
    let end = length === undefined ? reader.len : reader.pos + length
    const message = createBaseUpdateUsuariosGestorData()
    while (reader.pos < end) {
      const tag = reader.uint32()
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break
          }

          message.name = reader.string()
          continue
        }
        case 2: {
          if (tag !== 18) {
            break
          }

          message.description = reader.string()
          continue
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break
      }
      reader.skip(tag & 7)
    }
    return message
  }
}

function createBaseUsuariosGestor(): UsuariosGestor {
  return {}
}

export const UsuariosGestor: MessageFns<UsuariosGestor> = {
  encode(
    message: UsuariosGestor,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.id !== undefined && message.id !== '') {
      writer.uint32(10).string(message.id)
    }
    if (message.name !== undefined && message.name !== '') {
      writer.uint32(18).string(message.name)
    }
    if (message.description !== undefined) {
      writer.uint32(26).string(message.description)
    }
    return writer
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UsuariosGestor {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input)
    let end = length === undefined ? reader.len : reader.pos + length
    const message = createBaseUsuariosGestor()
    while (reader.pos < end) {
      const tag = reader.uint32()
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break
          }

          message.id = reader.string()
          continue
        }
        case 2: {
          if (tag !== 18) {
            break
          }

          message.name = reader.string()
          continue
        }
        case 3: {
          if (tag !== 26) {
            break
          }

          message.description = reader.string()
          continue
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break
      }
      reader.skip(tag & 7)
    }
    return message
  }
}

function createBaseUsuariosGestors(): UsuariosGestors {
  return {}
}

export const UsuariosGestors: MessageFns<UsuariosGestors> = {
  encode(
    message: UsuariosGestors,
    writer: BinaryWriter = new BinaryWriter()
  ): BinaryWriter {
    if (message.items !== undefined && message.items.length !== 0) {
      for (const v of message.items) {
        UsuariosGestor.encode(v!, writer.uint32(10).fork()).join()
      }
    }
    return writer
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UsuariosGestors {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input)
    let end = length === undefined ? reader.len : reader.pos + length
    const message = createBaseUsuariosGestors()
    while (reader.pos < end) {
      const tag = reader.uint32()
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break
          }

          if (message.items === undefined) {
            message.items = []
          }
          const el = UsuariosGestor.decode(reader, reader.uint32())
          if (el !== undefined) {
            message.items!.push(el)
          }
          continue
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break
      }
      reader.skip(tag & 7)
    }
    return message
  }
}

/** ───── Servicio CRUD ──────────────────────────────────────────── */

export interface UsuariosGestorServiceClient {
  createUsuariosGestor(
    request: CreateUsuariosGestorDto
  ): Observable<UsuariosGestor>

  getAllUsuariosGestors(
    request: UsuariosGestorEmpty
  ): Observable<UsuariosGestors>

  getUsuariosGestorById(request: GetByIdDto): Observable<UsuariosGestor>

  updateUsuariosGestor(
    request: UpdateUsuariosGestorDto
  ): Observable<UsuariosGestor>

  deleteUsuariosGestor(request: GetByIdDto): Observable<UsuariosGestorEmpty>
}

/** ───── Servicio CRUD ──────────────────────────────────────────── */

export interface UsuariosGestorServiceController {
  createUsuariosGestor(
    request: CreateUsuariosGestorDto
  ): Promise<UsuariosGestor> | Observable<UsuariosGestor> | UsuariosGestor

  getAllUsuariosGestors(
    request: UsuariosGestorEmpty
  ): Promise<UsuariosGestors> | Observable<UsuariosGestors> | UsuariosGestors

  getUsuariosGestorById(
    request: GetByIdDto
  ): Promise<UsuariosGestor> | Observable<UsuariosGestor> | UsuariosGestor

  updateUsuariosGestor(
    request: UpdateUsuariosGestorDto
  ): Promise<UsuariosGestor> | Observable<UsuariosGestor> | UsuariosGestor

  deleteUsuariosGestor(
    request: GetByIdDto
  ):
    | Promise<UsuariosGestorEmpty>
    | Observable<UsuariosGestorEmpty>
    | UsuariosGestorEmpty
}

export function UsuariosGestorServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      'createUsuariosGestor',
      'getAllUsuariosGestors',
      'getUsuariosGestorById',
      'updateUsuariosGestor',
      'deleteUsuariosGestor'
    ]
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method
      )
      GrpcMethod('UsuariosGestorService', method)(
        constructor.prototype[method],
        method,
        descriptor
      )
    }
    const grpcStreamMethods: string[] = []
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(
        constructor.prototype,
        method
      )
      GrpcStreamMethod('UsuariosGestorService', method)(
        constructor.prototype[method],
        method,
        descriptor
      )
    }
  }
}

export const USUARIOS_GESTOR_SERVICE_NAME = 'UsuariosGestorService'

/** ───── Servicio CRUD ──────────────────────────────────────────── */
export type UsuariosGestorServiceService = typeof UsuariosGestorServiceService
export const UsuariosGestorServiceService = {
  createUsuariosGestor: {
    path: '/usuarios_gestor.UsuariosGestorService/CreateUsuariosGestor',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateUsuariosGestorDto) =>
      Buffer.from(CreateUsuariosGestorDto.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      CreateUsuariosGestorDto.decode(value),
    responseSerialize: (value: UsuariosGestor) =>
      Buffer.from(UsuariosGestor.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UsuariosGestor.decode(value)
  },
  getAllUsuariosGestors: {
    path: '/usuarios_gestor.UsuariosGestorService/GetAllUsuariosGestors',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UsuariosGestorEmpty) =>
      Buffer.from(UsuariosGestorEmpty.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UsuariosGestorEmpty.decode(value),
    responseSerialize: (value: UsuariosGestors) =>
      Buffer.from(UsuariosGestors.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UsuariosGestors.decode(value)
  },
  getUsuariosGestorById: {
    path: '/usuarios_gestor.UsuariosGestorService/GetUsuariosGestorById',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetByIdDto) =>
      Buffer.from(GetByIdDto.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetByIdDto.decode(value),
    responseSerialize: (value: UsuariosGestor) =>
      Buffer.from(UsuariosGestor.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UsuariosGestor.decode(value)
  },
  updateUsuariosGestor: {
    path: '/usuarios_gestor.UsuariosGestorService/UpdateUsuariosGestor',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateUsuariosGestorDto) =>
      Buffer.from(UpdateUsuariosGestorDto.encode(value).finish()),
    requestDeserialize: (value: Buffer) =>
      UpdateUsuariosGestorDto.decode(value),
    responseSerialize: (value: UsuariosGestor) =>
      Buffer.from(UsuariosGestor.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UsuariosGestor.decode(value)
  },
  deleteUsuariosGestor: {
    path: '/usuarios_gestor.UsuariosGestorService/DeleteUsuariosGestor',
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetByIdDto) =>
      Buffer.from(GetByIdDto.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetByIdDto.decode(value),
    responseSerialize: (value: UsuariosGestorEmpty) =>
      Buffer.from(UsuariosGestorEmpty.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UsuariosGestorEmpty.decode(value)
  }
} as const

export interface UsuariosGestorServiceServer
  extends UntypedServiceImplementation {
  createUsuariosGestor: handleUnaryCall<CreateUsuariosGestorDto, UsuariosGestor>
  getAllUsuariosGestors: handleUnaryCall<UsuariosGestorEmpty, UsuariosGestors>
  getUsuariosGestorById: handleUnaryCall<GetByIdDto, UsuariosGestor>
  updateUsuariosGestor: handleUnaryCall<UpdateUsuariosGestorDto, UsuariosGestor>
  deleteUsuariosGestor: handleUnaryCall<GetByIdDto, UsuariosGestorEmpty>
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter
  decode(input: BinaryReader | Uint8Array, length?: number): T
}
